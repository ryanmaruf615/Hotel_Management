let mongoose,bcrypt;_072‍.x([["default",()=>_072‍.o]]);_072‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_072‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);

const {Schema} = mongoose ;

const userSchema = new Schema({
    name:{
        type:String,
        trim:true,
        required: 'Name is required'
    },
    email:{
        type:String,
        trim:true,
        required: 'Email is required',
        unique:true,
    },
    password:{
        type:String,
        required: 'Password is required',
        min:6,
        max:64,
    },
    stripe_account_id:'',
    stripe_seller:{},
    stripeSession:{},
},{timestamps:true});

userSchema.pre('save',function(next){
    let user = this;

    if(user.isModified('password')){
        return bcrypt.hash(user.password,12,function(err,hash){
            if(err){
                _072‍.g.console.log('BCRYPT Hash err',err);
                return next(err);
            }
            user.password = hash;
            return next();
        })
    }else{
        return next();
    }
});

userSchema.methods.comparePassword= function(password,next){
    bcrypt.compare(password,this.password,function(err,match){

        if(err){
            console.log('compare password error');
            return next(err,false);
        }
        //if not errr,we get null
        console.log("Match Password ")
        return next(null,match); //true return korbe 

    })
}

_072‍.d(mongoose.model('User',userSchema));

