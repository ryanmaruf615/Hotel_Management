let Hotel,fs;_3ba‍.x([["create",()=>create],["hotels",()=>hotels],["image",()=>image],["sellerHotels",()=>sellerHotels],["read",()=>read],["update",()=>update]]);_3ba‍.w("../models/hotel",[["default",["Hotel"],function(v){Hotel=v}]]);_3ba‍.w("fs",[["default",["fs"],function(v){fs=v}]]);


       const create = async (req,res) =>{
   //console.log('req.fields' , req.fields);
    //console.log('req.files' , req.files);

    try {
        let fields = req.fields;
        let files = req.files;

        let hotel = new Hotel(fields);
        hotel.postedBy = req.user._id;
        //handle image
        if(files.image){
            hotel.image.data  = fs.readFileSync(files.image.path);
            hotel.image.contentType = files.image.type;
        }
        hotel.save((err,result)=>{
            if(err){
                _3ba‍.g.console.log("saving hotel error",err);
                res.status(400).send('error saving');
            }
            res.json(result);
        });
        
    } catch (err) {
        _3ba‍.g.console.log(err);
        res.status(400).json({
            err:err.message
        });
    }
};

       const hotels = async (req , res) =>{

    let all = await Hotel.find({})
    .limit(24)
    .select("-image.data")
    .populate("postedBy","_id.name")
    .exec();
    //console.log(all);
    res.json(all);
}

       const image = async (req , res ) =>{
    let hotel = await Hotel.findById(req.params.hotelId).exec();
    if(hotel && hotel.image && hotel.image.data !== null){
        res.set("Content-Type",hotel.image.contentType);
        return res.send(hotel.image.data);
    }
};

       const sellerHotels = async (req , res ) =>{
    let all = await Hotel.find({postedBy:req.user._id})
    .select("-image.data")
    .populate("postedBy","_id.name")
    .exec();
    res.json(all);
};

        const read = async (req,res)=>{
    let hotel = await Hotel.findById(req.params.hotelId)
    .populate("postedBy","_id name")
    .select('-image.data').exec();
   // console.log('single hotel',hotel);
    res.json(hotel);
 }

        const update = async (req,res) =>{
    try {
        let fields = req.fields;
        let files = req.files;

        let data={...fields};

        if(files.image){
            let image = {};
            image.data= fs.readFileSync(files.image.path);
            image.contentType=files.image.type;

            data.image = image;
        }
        let updated = await Hotel.findByIdAndUpdate(req.params.hotelId,
            data,{new:true,}).select('-image.data');

            res.json(updated);    

    } catch (err) {
        _3ba‍.g.console.log(err);
        res.status(400).send('Hotel Update failed.try again');
    }

 };